<?php

namespace App\Tests\MeterEventLogging;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\Filesystem\Filesystem;

class CreationSingleEventByTypeApiTest extends WebTestCase
{
    /**
     * @var string
     */
    private $rootDir;
    /**
     * @var \Symfony\Bundle\FrameworkBundle\KernelBrowser
     */
    private $client;
    /**
     * @var \Symfony\Component\Filesystem\Filesystem
     */
    private $filesystem;

    private $events = [
        [
            "companyId" => 1111,
            "eventDateTimeOnClient" => "2022-02-06 22:22:22.222",
            "clientTimezone" => "Europe/Moscow",
            "sourceHostName" => "spb.yp.ru",
            "sourcePathName" => "some/path",
        ],
        [
            "companyId" => 2222,
            "eventDateTimeOnClient" => "2022-02-06 23:23:23.233",
            "clientTimezone" => "Europe/Moscow",
            "sourceHostName" => "msk.yp.ru",
            "sourcePathName" => "some/path",
        ],
    ];

    public function testRegisterShowPhoneEventTwice(): void
    {
        $this->testEventTwice('showPhone');
    }

    protected function testEventTwice(string $eventType): void
    {
        $this->client->restart();
        $events = [];
        foreach ($this->events as $event) {
            $event[$eventType] = 1;
            $events[] = $event;
            $this->client->jsonRequest(
                'POST',
                "/api/event/$eventType",
                $event
            );

            self::assertResponseIsSuccessful();
        }


        $filesystem = new Filesystem();
        $filePath = "{$this->rootDir}/$eventType.log";
        $this->assertTrue($filesystem->exists($filePath));

        $file = new \SplFileObject($filePath, 'r');
        $i = 0;
        $dateWithTime = (new \DateTime('now'))->format('Y-m-d H:i');
        while (!$file->eof()) {
            $line = trim($file->fgets());
            if (empty($line)) {
                continue;
            }
            $lineAsArray = json_decode($line, true);
            $this->assertEquals('SymfonyClient', $lineAsArray['userAgent']);
            $this->assertEquals('127.0.0.1', $lineAsArray['clientIp']);
            $this->assertStringStartsWith($dateWithTime, $lineAsArray['eventReceivingDateTimeOnServer']);

            unset($lineAsArray['userAgent'], $lineAsArray['clientIp'], $lineAsArray['eventReceivingDateTimeOnServer']);
            $this->assertEquals($events[$i++], $lineAsArray);
        }
    }

    public function testRegisterShowSiteEventTwice(): void
    {
        $this->testEventTwice("showSite");
    }

    public function testRegisterShowCompanyPageTwice(): void
    {
        $this->testEventTwice('showCompanyPage');
    }
    public function testRegisterVisitSiteFormCompanyCardTwice(): void
    {
        $this->testEventTwice('visitSiteFromCompanyCard');
    }

    public function testRegisterVisitSiteFormCompanyPageTwice(): void
    {
        $this->testEventTwice('visitSiteFromCompanyPage');
    }

    protected function setUp(): void
    {
        $this->client = static::createClient(
            [],
            [
                'HTTP_USER_AGENT' => 'SymfonyClient',
                'REMOTE_ADDR' => '127.0.0.1',
            ]
        );

        $container = $this->client->getContainer();

        $date = (new \DateTime('now'))->format('Y-m-d');
        $this->rootDir = "{$container->getParameter('stats_meter.logs_dir')}/$date";

        $this->filesystem = new Filesystem();
        if ($this->filesystem->exists($this->rootDir)) {
            $this->filesystem->remove($this->rootDir);
        }

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        $this->filesystem = new Filesystem();
        if ($this->filesystem->exists($this->rootDir)) {
            $this->filesystem->remove($this->rootDir);
        }

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
